- name: Disable default version
  ansible.builtin.shell: dnf module disable nodejs -y

- name: Enable nodejs 18 version
  ansible.builtin.shell: dnf module enable nodejs:18 -y

- name: Install nodejs
  ansible.builtin.dnf:
    name: nodejs
    state: installed

- name: Configure Backend.service
  ansible.builtin.template:
    src: backend.service
    dest:  /etc/systemd/system/backend.service

- name: Add Application User
  ansible.builtin.user:
    name: expense

- name: App Pre-requisite
  ansible.builtin.include_role:
    name: common
    tasks_from: App_prereq



- name: Download Dependencies
  community.general.npm:
    path: /app/location

- name: Install New relic npm dependency
  ansible.builtin.shell: npm install newrelic --save



- name: Reload system D and start backend service
  ansible.builtin.systemd_service:
    name: backend
    state: restarted
    enabled: yes
    daemon-reload: yes

- name: Install mysql client
  ansible.builtin.dnf:
    name: mysql
    state: installed

- name: Install Python Library
  ansible.builtin.dnf:
    name: python3-PyMySQL
    state: installed

- name: Load Schema
  community.mysql.mysql_db:
    state: import
    name: all
    target: /app/schema/backend.sql
    login_user: "{{lookup('amazon.aws.aws_ssm','{{env}}.expense.rds.username',region='us-east-1') }}"
    login_password: "{{lookup('amazon.aws.aws_ssm','{{env}}.expense.rds.password',region='us-east-1') }}"  # loading schema to newly create RDS
    login_host: "{{lookup('amazon.aws.aws_ssm', '{{env}}.expense.rds.endpoint',region='us-east-1') }}"

